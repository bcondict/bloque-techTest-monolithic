---
const { className } = Astro.props;
---

<section
  class=`choose-content-type ${className ? className : null}`
  id="choose-content-type"
>
  <slot />
  <!-- <nav class="content-options" id="content-options"></nav> -->
  <nav class="content-options" id="content-options">
    <div class="tab-highlight"></div>
    <!-- tab buttons will be appended here dynamically -->
  </nav>
  <!-- <hr class="solid" /> -->
  <article class="content-value" id="content-value"></article>
</section>

<style is:global>
  .content-options {
    position: relative;
    display: flex;
    gap: 1rem;
    margin: 1.5rem 1rem;
    border-radius: 3.5rem;
    box-shadow:
      inset 0 1px 5px 1px #5797a3,
      0 0 0 2px #78bac8;
    padding: 1px 2px;
    overflow: hidden;
  }

  .content-options .tab-highlight {
    position: absolute;
    top: 2px; /* adjust to match button padding */
    left: 0;
    height: calc(100% - 4px); /* slightly smaller to look good */
    width: 0;
    background: linear-gradient(to bottom, #79e1f2, #5cc2d6);
    border-radius: 3.5rem;
    transition:
      transform 300ms ease,
      width 300ms ease;
    z-index: 1;
  }

  .content-options > button {
    position: relative;
    z-index: 2; /* make buttons stay above the highlight */
    padding: 0.8rem 0.5rem;
    border: none;
    border-radius: 3.5rem;
    font-size: 1.3rem;
    font-family: sans-serif;
    background: none;
    color: white;
    cursor: pointer;
    transition: color 300ms ease;
  }

  .content-options > button.selected {
    color: #002742;
  }

  .content-value {
    margin-inline: 1rem;
  }

  @media (max-width: 1024px) {
    .content-options {
      margin-inline: 0;
    }
  }
</style>

<script>
  const $contentOptions = document.querySelectorAll(".content-type");
  const $navigationOptions = document.querySelector("#content-options")!;
  const $contentValue = document.querySelector("#content-value")!;
  const $tabHighlight = $navigationOptions.querySelector(
    ".tab-highlight",
  ) as HTMLElement;

  /* Initialize */
  $contentOptions.forEach((option) => {
    $navigationOptions.appendChild(option.children[0]);
    $contentValue.appendChild(option.children[0]);
    option.classList.forEach((item) => {
      $contentValue?.classList.add(item);
    });

    option.remove();
  });

  const navigationOptionsArray = Array.from(
    $navigationOptions.querySelectorAll("button"),
  );

  const moveHighlight = (index: number) => {
    const $target = navigationOptionsArray[index];
    const targetRect = $target.getBoundingClientRect();
    const navRect = $navigationOptions.getBoundingClientRect();

    const offsetLeft = targetRect.left - navRect.left;
    const width = targetRect.width;

    $tabHighlight.style.transform = `translateX(${offsetLeft}px)`;
    $tabHighlight.style.width = `${width}px`;
  };

  /* Event listeners */
  navigationOptionsArray.forEach((option, index) => {
    option.addEventListener("click", () => {
      // Hide all contents
      Array.from($contentValue.children).forEach((child) => {
        child.classList.add("disable");
      });
      // Show selected
      $contentValue.children[index].classList.remove("disable");

      // Highlight selected tab
      navigationOptionsArray.forEach((btn) => btn.classList.remove("selected"));
      option.classList.add("selected");

      moveHighlight(index);
    });
  });

  /* Initial State */
  document.addEventListener("DOMContentLoaded", () => {
    $contentValue.children[0].classList.remove("disable");
    navigationOptionsArray[0].classList.add("selected");
    moveHighlight(0);
  });

  /* Handle window resize */
  window.addEventListener("resize", () => {
    const activeIndex = navigationOptionsArray.findIndex((btn) =>
      btn.classList.contains("selected"),
    );
    if (activeIndex !== -1) moveHighlight(activeIndex);
  });
</script>
